// Souffle - A Datalog Compiler
// Copyright (c) 2017, The Souffle Developers. All rights reserved
// Licensed under the Universal Permissive License v 1.0 as shown at:
// - https://opensource.org/licenses/UPL
// - <souffle root>/licenses/SOUFFLE-UPL.txt

.type Airport
.number_type Hour
.type Route = [
	source : Airport,
	destination : Airport,
	start : Hour,
	duration : Hour
]

// List of flights
.decl flight(r : Route)
flight(*Route["Sydney", "Melbourne", 8, 2]).
flight(*Route["Sydney", "Melbourne", 20, 2]).
flight(*Route["Sydney", "Singapore", 6, 10]).
flight(*Route["Melbourne", "Auckland", 14, 4]).
flight(*Route["Sydney", "Auckland", 12, 3]).
flight(*Route["Singapore", "Tokyo", 21, 12]).
flight(*Route["Singapore", "Dubai", 10, 11]).
flight(*Route["Singapore", "London", 14, 14]).
flight(*Route["Dubai", "London", 5, 6]).
flight(*Route["London", "New York", 17, 15]).
flight(*Route["London", "New York", 5, 15]).
flight(*Route["London", "Oslo", 15, 3]).
flight(*Route["London", "Paris", 10, 3]).
flight(*Route["London", "Reykjavik", 8, 5]).
flight(*Route["Oslo", "Reykjavik", 9, 4]).
flight(*Route["Oslo", "Reykjavik", 21, 4]).
flight(*Route["Los Angeles", "New York", 14, 5]).
flight(*Route["Tokyo", "Los Angeles", 4, 14]).
flight(*Route["Singapore", "Los Angeles", 9, 14]).
flight(*Route["Singapore", "Los Angeles", 17, 14]).
flight(*Route["Tokyo", "Vancouver", 12, 10]).
flight(*Route["Singapore", "Vancouver", 18, 14]).
flight(*Route["Los Angeles", "Vancouver", 5, 5]).

// Input starting airport and time
.decl travel(s : Airport, t : Hour)
.input travel()

// Find all connecting flights from starting airport
.decl connection(s : Airport, d : Airport, t : Hour, h : Hour)
.output connection()
connection(s, d, as((t + h) % 24,Hour), as((24 + t - tx) % 24 + h,Hour)) :- travel(s, tx), flight(*Route[s, d, t, h]).
connection(s, d, as((tx + h) % 24,Hour), as(hx + (24 + t - tx) % 24 + h,Hour)) :- connection(s, x, tx, hx), flight(*Route[x, d, t, h]).

// Total time in hours to reach destination airport
.decl total_time(d : Airport, h : Hour)
.output total_time()
total_time(d, h) :- connection(s, d, _, _), h = min x : connection(s, d, _, x).
